import { useEffect, useState } from 'react';
import { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { Button, Container, FormControl, TextField, Typography } from '@mui/material';

import { MetaMaskConnectCard } from '@components';
import { useMetaMask } from 'metamask-react';
import { Swap2pInterface, addressRegexp, ERC20Interface, swap2pAddress } from 'utils';

const CreateTradePage: NextPage = () => {
  const router = useRouter();
  const { status, connect, account, chainId, ethereum } = useMetaMask();

  const [XAsset, setXAsset] = useState('');
  const [XAmount, setXAmount] = useState<number | null>(null);
  const [YAddress, setYAddress] = useState('');
  const [YAsset, setYAsset] = useState('');
  const [YAmount, setYAmount] = useState<number | null>(null);

  useEffect(() => {
    const {
      XAsset: XAssetQuery,
      XAmount: XAmountQuery,
      YAddress: YAddressQuery,
      YAsset: YAssetQuery,
      YAmount: YAmountQuery,
    } = router.query;

    setXAsset(XAssetQuery as string ?? '');
    setXAmount(Number(XAmountQuery as string));
    setYAddress(YAddressQuery as string ?? '');
    setYAsset(YAssetQuery as string ?? '');
    setYAmount(Number(YAmountQuery as string));
  }, [router.isReady]);

  const XAssetMatch = XAsset.match(addressRegexp);
  const YAddressMatch = YAddress.match(addressRegexp);
  const YAssetMatch = YAsset.match(addressRegexp);

  const canCreate = Boolean(XAssetMatch && XAmount !== null && YAddressMatch && YAssetMatch && YAmount !== null);

  const handleSubmit = async () => {
    const approveData = ERC20Interface.encodeFunctionData('approve', [swap2pAddress, XAmount]);
    await ethereum.request({
      method: 'eth_sendTransaction',
      params: [{
        to: XAsset,
        from: ethereum.selectedAddress,
        chainId: chainId,
        data: approveData,
      }],
    });

    const escrowData = Swap2pInterface.encodeFunctionData('createEscrow', [XAsset, XAmount, YAsset, YAmount, YAddress]);
    await ethereum.request({
      method: 'eth_sendTransaction',
      params: [{
        to: swap2pAddress,
        from: ethereum.selectedAddress,
        chainId: chainId,
        data: escrowData,
      }],
    });
  };

  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MetaMaskConnectCard />

      <FormControl component='form' style={{ display: status === 'connected' ? 'flex' : 'none'}}>
        <TextField
          label='ChainId'
          value={chainId}
          InputLabelProps={{
            shrink: true,
          }}
          InputProps={{
            readOnly: true,
          }}
        />
        <TextField
          label='XAddress'
          value={account}
          InputLabelProps={{
            shrink: true,
          }}
          InputProps={{
            readOnly: true,
          }}
        />
        <TextField
          required
          label='XAsset'
          value={XAsset}
          onChange={e => setXAsset(e.target.value)}
        />
        <TextField
          required
          label='XAmount'
          type="number"
          value={XAmount}
          onChange={e => setXAmount(e.target.value ? Number(e.target.value) : null)}
        />
        <TextField
          required
          label='YAddress'
          value={YAddress}
          onChange={e => setYAddress(e.target.value)}
        />
        <TextField
          required
          label='YAsset'
          value={YAsset}
          onChange={e => setYAsset(e.target.value)}
        />
        <TextField
          required
          label='YAmount'
          type="number"
          value={YAmount}
          onChange={e => setYAmount(e.target.value ? Number(e.target.value) : null)}
        />
        <Button
          disabled={!canCreate}
          onClick={handleSubmit}
        ><Typography>Create</Typography></Button>
      </FormControl>
    </Container>
  );
};

export default CreateTradePage;
